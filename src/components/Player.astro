---
interface Props {
  url: string | undefined;
}

const { url = undefined } = Astro.props;
---

<!--<audio class="player" controls>-->
<!--  <source src=`${url}` type="audio/mpeg">-->
<!--  Your browser does not support the audio element.-->
<!--</audio>-->

<style>
  .audio-player {
    width: 400px;
    margin: 20px;
  }

  .controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 10px;
  }

  .progress {
    height: 10px;
    background-color: #ccc;
    margin-top: 10px;
  }

  .progress-bar {
    width: 0;
    height: 100%;
    background-color: #4caf50;
  }

  #current-time, #total-time {
    margin-top: 10px;
  }
</style>

<div class="audio-player">
  <audio id="audio" controls>
    <source src=`${url}` type="audio/mpeg">
    Your browser does not support the audio element.
  </audio>
  <div class="controls">
    <button id="play-pause-button">Play</button>
    <input type="range" id="volume-control" min="0" max="1" step="0.01" value="1">
  </div>
  <div class="progress">
    <div class="progress-bar" id="progress-bar"></div>
  </div>
  <div id="current-time">0:00</div>
  <div id="total-time">0:00</div>

  <script>
    const audio = document.getElementById("audio");
    const playPauseButton = document.getElementById("play-pause-button");
    const volumeControl = document.getElementById("volume-control");
    const progressBar = document.getElementById("progress-bar");
    const currentTimeDisplay = document.getElementById("current-time");
    const totalTimeDisplay = document.getElementById("total-time");

    let isPlaying = false;

    playPauseButton.addEventListener("click", () => {
      if (isPlaying) {
        audio.pause();
        playPauseButton.textContent = "Play";
      } else {
        audio.play();
        playPauseButton.textContent = "Pause";
      }
      isPlaying = !isPlaying;
    });

    volumeControl.addEventListener("input", () => {
      audio.volume = volumeControl.value;
    });

    audio.addEventListener("timeupdate", () => {
      const currentTime = audio.currentTime;
      const duration = audio.duration;

      const currentMinutes = Math.floor(currentTime / 60);
      const currentSeconds = Math.floor(currentTime % 60);
      const totalMinutes = Math.floor(duration / 60);
      const totalSeconds = Math.floor(duration % 60);

      currentTimeDisplay.textContent = `${currentMinutes}:${currentSeconds < 10 ? '0' : ''}${currentSeconds}`;
      totalTimeDisplay.textContent = `${totalMinutes}:${totalSeconds < 10 ? '0' : ''}${totalSeconds}`;

      const progress = (currentTime / duration) * 100;
      progressBar.style.width = `${progress}%`;
    });
  </script>
</div>
